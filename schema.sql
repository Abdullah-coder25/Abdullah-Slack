-- Abdullah Slack Clone Schema
-- Run this in Supabase Dashboard: Database â†’ SQL Editor

-- Create users table for profiles
CREATE TABLE IF NOT EXISTS public.user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username TEXT UNIQUE,
    display_name TEXT,
    avatar_url TEXT,
    status TEXT DEFAULT 'online',
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create workspaces table
CREATE TABLE IF NOT EXISTS public.workspaces (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    created_by UUID NOT NULL REFERENCES auth.users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create channels table
CREATE TABLE IF NOT EXISTS public.channels (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    workspace_id BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    is_private BOOLEAN DEFAULT false,
    created_by UUID NOT NULL REFERENCES auth.users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create channel members table
CREATE TABLE IF NOT EXISTS public.channel_members (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    channel_id BIGINT NOT NULL REFERENCES public.channels(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    joined_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(channel_id, user_id)
);

-- Create messages table (updated)
CREATE TABLE IF NOT EXISTS public.messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id),
    channel_id BIGINT REFERENCES public.channels(id) ON DELETE CASCADE,
    recipient_id UUID REFERENCES auth.users(id), -- For direct messages
    content TEXT NOT NULL CHECK (length(content) <= 4000),
    message_type TEXT DEFAULT 'text', -- 'text', 'file', 'image'
    file_url TEXT,
    file_name TEXT,
    thread_id BIGINT REFERENCES public.messages(id),
    edited_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create message reactions table
CREATE TABLE IF NOT EXISTS public.message_reactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message_id BIGINT NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    emoji TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(message_id, user_id, emoji)
);

-- Create typing indicators table
CREATE TABLE IF NOT EXISTS public.typing_indicators (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    channel_id BIGINT REFERENCES public.channels(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Enable Row Level Security on all tables
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.channels ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.channel_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_reactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.typing_indicators ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "select_any_authenticated" ON public.messages;
DROP POLICY IF EXISTS "insert_any_authenticated" ON public.messages;

-- User Profiles Policies
CREATE POLICY "user_profiles_select" ON public.user_profiles FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "user_profiles_insert" ON public.user_profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "user_profiles_update" ON public.user_profiles FOR UPDATE USING (auth.uid() = id);

-- Workspaces Policies
CREATE POLICY "workspaces_select" ON public.workspaces FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "workspaces_insert" ON public.workspaces FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Channels Policies
CREATE POLICY "channels_select" ON public.channels FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "channels_insert" ON public.channels FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Channel Members Policies
CREATE POLICY "channel_members_select" ON public.channel_members FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "channel_members_insert" ON public.channel_members FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "channel_members_delete" ON public.channel_members FOR DELETE USING (auth.uid() = user_id);

-- Messages Policies
CREATE POLICY "messages_select" ON public.messages 
FOR SELECT USING (
    auth.role() = 'authenticated' AND (
        -- Channel messages: user must be member of the channel
        (channel_id IS NOT NULL AND EXISTS (
            SELECT 1 FROM public.channel_members 
            WHERE channel_id = messages.channel_id AND user_id = auth.uid()
        )) OR
        -- Direct messages: user must be sender or recipient
        (channel_id IS NULL AND (user_id = auth.uid() OR recipient_id = auth.uid()))
    )
);

CREATE POLICY "messages_insert" ON public.messages 
FOR INSERT WITH CHECK (
    auth.role() = 'authenticated' AND user_id = auth.uid()
);

CREATE POLICY "messages_update" ON public.messages 
FOR UPDATE USING (auth.uid() = user_id);

-- Message Reactions Policies
CREATE POLICY "reactions_select" ON public.message_reactions FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "reactions_insert" ON public.message_reactions FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "reactions_delete" ON public.message_reactions FOR DELETE USING (auth.uid() = user_id);

-- Typing Indicators Policies
CREATE POLICY "typing_select" ON public.typing_indicators FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "typing_insert" ON public.typing_indicators FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "typing_delete" ON public.typing_indicators FOR DELETE USING (auth.uid() = user_id);

-- Grant permissions
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON public.user_profiles TO authenticated;
GRANT ALL ON public.workspaces TO authenticated;
GRANT ALL ON public.channels TO authenticated;
GRANT ALL ON public.channel_members TO authenticated;
GRANT ALL ON public.messages TO authenticated;
GRANT ALL ON public.message_reactions TO authenticated;
GRANT ALL ON public.typing_indicators TO authenticated;

-- Grant sequence permissions
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- Note: Default workspace and general channel will be created automatically
-- when the first user signs up through the application logic